"""Burp Python extension - check for external JavaScript include files in HTML."""
import re

from burp import IBurpExtender
from burp import IExtensionHelpers
from burp import IHttpListener
from burp import IHttpRequestResponse


PATTERN = "<script.*?src=(\"[^\"]*\"|'[^']*'|[^'\"]>)"


class BurpExtender(IBurpExtender, IHttpListener):
    """The IBurpExtender interface, required for any Burp Suite extension."""

    def registerExtenderCallbacks(self, callbacks):
        """Default entry point when the extension is loaded."""
        self.callbacks = callbacks
        self.helpers = callbacks.getHelpers()
        callbacks.setExtensionName("External JavaScript includes")
        callbacks.issueAlert("Extension loaded")
        callbacks.registerHttpListener(self)

    def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo):
        """IHttpListener: Default entry point for any HTTP message."""

        if not messageIsRequest:
            self.analyzeResponse(messageInfo)

    def analyzeResponse(self, requestResponse):
        """Check whether response is HTTP and contains external JavaScript links.
        Prints matches to stdout."""
        response = requestResponse.getResponse()  # byte[]
        info = self.helpers.analyzeResponse(response)  # IResponseInfo
        mimetype = info.getStatedMimeType()
        if "HTML" in mimetype:
            request = self.helpers.analyzeRequest(requestResponse)  # IRequestInfo
            url = request.getUrl()  # java.net.URL
            data = self.helpers.bytesToString(response)
            if not data:
                return
            offset = 0
            p = re.compile(PATTERN, re.IGNORECASE)
            while offset < len(data):
                match = p.search(data, offset)
                if not match:
                    break
                offset = match.end()
                payload = match.group(1)
                if (payload.startswith('"') and payload.endswith('"')) or (
                    payload.startswith("'") and payload.endswith("'")
                ):
                    payload = payload[1:-1]
                if payload.startswith("//"):
                    payload = url.getProtocol() + ":" + payload
                if payload.lower().startswith("http"):
                    self.callbacks.printOutput(
                        url.toString() + " includes the script " + payload
                    )
                    self.callbacks.issueAlert(
                        url.toString() + " includes the script " + payload
                    )
