"""Burp Python extension - check for external JavaScript include files in HTML."""
import cgi
import re

from array import array
from java.io import PrintWriter
from burp import IBurpExtender
from burp import IExtensionHelpers
from burp import IHttpListener
from burp import IHttpRequestResponse
from burp import IScanIssue
from burp import IScannerCheck


# Note that HTML is not a regular language, so this is not foolproof
# Look for a script tag containing a src attribute,
# either surrounded by a double quote, a single quote, or nothing
pattern = "<script.*?src=(\"[^\"]*\"|'[^']*'|[^'\"]>)"


class BurpExtender(IBurpExtender, IHttpListener, IScannerCheck):
    """The IBurpExtender interface, required for any Burp Suite extension."""

    def registerExtenderCallbacks(self, callbacks):
        """Default entry point for the extension."""
        self._callbacks = callbacks
        self._helpers = callbacks.getHelpers()
        callbacks.setExtensionName("External JavaScript includes")
        callbacks.issueAlert("Extension version 1.0 loaded")
        self._stdout = PrintWriter(callbacks.getStdout(), True)
        callbacks.registerScannerCheck(self)
        callbacks.registerHttpListener(self)

    def analyzeResponse(self, requestResponse):
        """Check whether response is HTTP and contains external links.
        Prints matches to stdout.
        Return an array of matches and a payload string."""
        matches = []
        payloads = "<br/><ul>"
        response = requestResponse.getResponse()  # byte[]
        info = self._helpers.analyzeResponse(response)  # IResponseInfo
        mimetype = info.getStatedMimeType()
        if "HTML" in mimetype:
            request = self._helpers.analyzeRequest(requestResponse)  # IRequestInfo
            url = request.getUrl()  # java.net.URL
            # Convert byte[] to a string, to perform regular expression searches
            data = self._helpers.bytesToString(response)
            if not data:
                return None, ""
            offset = 0
            p = re.compile(pattern, re.IGNORECASE)
            while offset < len(data):
                match = p.search(data, offset)
                if not match:
                    break
                offset = match.end()
                payload = match.group(1)
                if (payload.startswith('"') and payload.endswith('"')) or (
                    payload.startswith('"') and payload.endswith('"')
                ):
                    payload = payload[1:-1]
                if payload.startswith("//"):
                    payload = url.getProtocol() + ":" + payload

                if payload.lower().startswith("http"):
                    message = url.toString() + " includes the script " + cgi.escape(payload)
                    matches.append(array("i", [match.start(), offset]))
                    payloads += "<li>" + payload + "</li>"
                    self._stdout.println(
                        url.toString() + " includes the script " + cgi.escape(payload)
                    )

        return matches, payloads

    def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo):
        """IHttpListener: Default entry point for any HTTP message.
        messageInfo: IHttpRequestResponse"""
        if not messageIsRequest:
            matches, payloads = self.analyzeResponse(messageInfo)

    def doPassiveScan(self, baseRequestResponse):
        """IScannerCheck interface - perform passive checks.
        baseRequestResponse: IHttpRequestResponse"""
        matches, payloads = self.analyzeResponse(baseRequestResponse)

        if not matches:
            return None

        return [
            CustomScanIssue(
                baseRequestResponse.getHttpService(),
                self._helpers.analyzeRequest(baseRequestResponse).getUrl(),
                [self._callbacks.applyMarkers(baseRequestResponse, None, matches)],
                "JavaScript include",
                "HTML page includes JavaScript from another domain:"
                + payloads
                + "</ul>",
                "Low",
            )
        ]

    def doActiveScan(self, baseRequestResponse, insertionPoint):
        """Active scan entry point."""
        pass

    def consolidateDuplicateIssues(self, existingIssue, newIssue):
        if existingIssue.getIssueName() == newIssue.getIssueName():
            return -1

        return 0


class CustomScanIssue(IScanIssue):
    """Custom Scanner issue."""

    def __init__(self, httpService, url, httpMessages, name, detail, severity):
        self._httpService = httpService
        self._url = url
        self._httpMessages = httpMessages
        self._name = name
        self._detail = detail
        self._severity = severity

    def getUrl(self):
        return self._url

    def getIssueName(self):
        return self._name

    def getIssueType(self):
        return 0

    def getSeverity(self):
        return self._severity

    def getConfidence(self):
        return "Certain"

    def getIssueBackground(self):
        pass

    def getRemediationBackground(self):
        pass

    def getIssueDetail(self):
        return self._detail

    def getRemediationDetail(self):
        pass

    def getHttpMessages(self):
        return self._httpMessages

    def getHttpService(self):
        return self._httpService
